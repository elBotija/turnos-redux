{"version":3,"sources":["components/Header.js","components/AgregarCita.js","actions/citasActions.js","actions/types.js","actions/errorActions.js","components/Cita.js","reducers/citasReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","components/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","AgregarCita","nombreMascotaRef","React","createRef","propietarioRef","fechaRef","horaRef","sintomasRef","crearNuevaCita","e","preventDefault","mascota","_this","current","value","propietario","fecha","hora","sintomas","mostrarError","nuevaCita","id","uuid","agregarCita","currentTarget","reset","this","existeError","error","onSubmit","type","ref","placeholder","Component","connect","state","citas","cita","payload","estado","Cita","eliminarCita","borrarCita","info","_this$props$info","key","onClick","initialState","combineReducers","arguments","length","undefined","action","Object","objectSpread","concat","toConsumableArray","filter","middleware","thunk","storageState","localStorage","getItem","JSON","parse","store","createStore","reducerPrincipal","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","setItem","stringify","getState","ListaCitas","obtenerCitas","mensaje","keys","map","components_Cita","App","es","components_Header","components_AgregarCita","components_ListaCitas","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7f59c34.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Header = (props) => {\n    return(\n        <header>\n            <h1 className=\"text-center\">{props.title}</h1>\n        </header>\n    )\n}\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport uuid from 'uuid'\nimport PropTypes from 'prop-types'\n\n// redux\nimport { connect } from 'react-redux'\nimport { agregarCita } from '../actions/citasActions'\nimport { mostrarError } from '../actions/errorActions'\n\nclass AgregarCita extends Component{\n\n    componentWillMount(){\n        this.props.mostrarError(false)\n    }\n\n    // ref\n    nombreMascotaRef = React.createRef()\n    propietarioRef = React.createRef()\n    fechaRef = React.createRef()\n    horaRef = React.createRef()\n    sintomasRef = React.createRef()\n\n    crearNuevaCita = (e) => {\n        e.preventDefault()\n\n        const mascota =  this.nombreMascotaRef.current.value,\n              propietario = this.propietarioRef.current.value,\n              fecha = this.fechaRef.current.value,\n              hora = this.horaRef.current.value,\n              sintomas = this.sintomasRef.current.value\n\n        if( mascota === '' || propietario === '' || fecha === '' || hora === '' || sintomas === ''){\n            this.props.mostrarError(true)\n        }else{\n            const nuevaCita ={\n                id: uuid(),\n                mascota,\n                propietario,\n                fecha,\n                hora,\n                sintomas\n            }\n\n            //se envia el objeto al padre\n            this.props.agregarCita(nuevaCita)\n\n            //reiniciar formulario\n            e.currentTarget.reset()\n\n            this.props.mostrarError(false)\n        }\n\n    }\n\n    render(){\n        const existeError = this.props.error\n        return(\n            <div className='card mt-5'>\n                <div className='card-body'>\n                    <h2 className='card-title text-center mb-5'>\n                        Agrega las citas aquí\n                    </h2>\n                    <form onSubmit={this.crearNuevaCita}>\n                      <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-lg-3 col-form-label\">Nombre Mascota</label>\n                        <div className=\"col-sm-8 col-lg-9\">\n                            <input type=\"text\" ref={this.nombreMascotaRef} className=\"form-control\" placeholder=\"Nombre Mascota\" />\n                        </div>\n                      </div>\n                      <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-3 col-form-label\">Nombre Dueño</label>\n                            <div className=\"col-sm-8 col-lg-9\">\n                                <input type=\"text\" ref={this.propietarioRef} className=\"form-control\"  placeholder=\"Nombre Dueño de la Mascota\" />\n                            </div>\n                      </div>\n\n                       <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-3 col-form-label\">Fecha</label>\n                            <div className=\"col-sm-8 col-lg-4  mb-4 mb-lg-0\">\n                                <input type=\"date\" ref={this.fechaRef} className=\"form-control\" />\n                            </div>\n\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\n                            <div className=\"col-sm-8 col-lg-3\">\n                                <input type=\"time\" ref={this.horaRef} className=\"form-control\" />\n                            </div>\n                      </div>\n\n                      <div className=\"form-group row\">\n                            <label className=\"col-sm-4 col-lg-3 col-form-label\">Sintomas</label>\n                            <div className=\"col-sm-8 col-lg-9\">\n                                <textarea ref={this.sintomasRef} className=\"form-control\"></textarea>\n                            </div>\n                      </div>\n                      <div className=\"form-group row justify-content-end\">\n                            <div className=\"col-sm-3\">\n                                <button type=\"submit\" className=\"btn btn-success w-100\">Agregar</button>\n                            </div>\n                      </div>\n                  </form>\n                  { existeError ? <div className='alert alert-danger text-center'>Todos los campos son obligatorios</div> : '' }\n                </div>\n            </div>\n        )\n    }\n}\n\nAgregarCita.propTypes = {\n    agregarCita: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    citas: state.citas.citas,\n    error: state.error.error\n})\n\nexport default connect(mapStateToProps, {agregarCita, mostrarError}) (AgregarCita)\n","import { MOSTRAR_CITAS,BORRAR_CITA, AGREGAR_CITA } from './types'\n\nexport const obtenerCitas = () => {\n    return{\n        type: MOSTRAR_CITAS\n    }\n}\n\nexport const agregarCita = (cita) => {\n    return {\n        type: AGREGAR_CITA,\n        payload: cita\n    }\n}\n\nexport const borrarCita = (id) => {\n    return{\n        type: BORRAR_CITA,\n        payload: id\n    }\n}\n","export const MOSTRAR_CITAS = 'MOSTRAR_CITAS'\nexport const AGREGAR_CITA = 'AGREGAR_CITA'\nexport const BORRAR_CITA = 'BORRAR_CITA'\n\n// validar formulario\nexport const MOSTRAR_ERROR = 'MOSTRAR_ERROR'\n","import { MOSTRAR_ERROR } from './types'\n\nexport const mostrarError = (estado) => {\n    return{\n        type: MOSTRAR_ERROR,\n        payload: estado\n    }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n//redux\nimport { connect } from 'react-redux'\nimport { borrarCita } from '../actions/citasActions'\n\nclass Cita extends Component{\n\n    eliminarCita = (e) => {\n        // console.log(this.props.info.id)\n        this.props.borrarCita(this.props.info.id)\n    }\n\n    render(){\n        const { mascota, propietario, fecha, hora, sintomas, id } = this.props.info\n        return(\n            <div className='media mt-3' key={id}>\n                <div className='media-body'>\n                    <h3 className='mt-0'>{mascota}</h3>\n                    <p className='card-text'><span>Nombre del Dueño: {propietario}</span></p>\n                    <p className='card-text'><span>Fecha:</span> {fecha}</p>\n                    <p className='card-text'><span>Hora:</span> {hora}</p>\n                    <p className='card-text'><span>Sintoma:</span></p>\n                    <p className='card-text'>{sintomas}</p>\n                    <button onClick={ this.eliminarCita } className='btn btn-danger'>Borrar &times;</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nCita.propTypes = {\n    info: PropTypes.shape({\n        fecha: PropTypes.string.isRequired,\n        hora: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n        mascota: PropTypes.string.isRequired,\n        propietario: PropTypes.string.isRequired,\n        sintomas: PropTypes.string.isRequired\n    }),\n    borrarCita: PropTypes.func.isRequired\n}\n\nexport default connect(null, {borrarCita}) (Cita)\n","import { MOSTRAR_CITAS, BORRAR_CITA, AGREGAR_CITA } from '../actions/types'\n\n//state inicial, cada reducer debe tener su propio state\nconst initialState = {\n    citas: [\n        {\n            id: 0,\n            fecha: '10-20-30',\n            hora: '10:30',\n            mascota: 'perro',\n            propietario: 'murillo',\n            sintomas: 'no para de jugar'\n        }\n    ]\n}\n\nexport default function( state = initialState, action){\n    switch (action.type) {\n        case MOSTRAR_CITAS:\n            return{\n                ...state\n            }\n        case AGREGAR_CITA:\n            return{\n                ...state,\n                citas: [...state.citas, action.payload]\n            }\n        case BORRAR_CITA:\n            return{\n                ...state,\n                citas: state.citas.filter(cita => cita.id !== action.payload)\n            }\n        default:\n            return state\n    }\n}\n","import { MOSTRAR_ERROR } from '../actions/types'\n\n// cada reducer tiene su propio state\n\nconst initialState = {\n    error: ''\n}\n\nexport default function(state = initialState, action){\n    switch (action.type) {\n        case MOSTRAR_ERROR:\n            return {\n                error: action.payload\n            }\n        default: return state\n\n    }\n}\n","import { combineReducers } from 'redux'\nimport citasReducer from './citasReducer'\nimport errorReducer from './errorReducer'\n\nexport default combineReducers({\n    citas: citasReducer,\n    error: errorReducer\n});\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n// importar reducers\nimport reducerPrincipal from './reducers'\n\n// const initialState = {}\n\nconst middleware = [thunk]\n\n// Agregar local Storage\nconst storageState = localStorage.getItem('citas') ? JSON.parse(localStorage.getItem('citas')) : []\n\nconst store = createStore(reducerPrincipal, storageState, compose(applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nexport default store\n","import React, { Component } from 'react'\nimport Cita from './Cita'\nimport PropTypes from 'prop-types'\n\n// redux\nimport { connect } from 'react-redux'\nimport { obtenerCitas} from '../actions/citasActions'\n\nimport store from '../store'\nstore.subscribe(() => {\n    localStorage.setItem('citas', JSON.stringify(store.getState()))\n})\n\nclass ListaCitas extends Component {\n\n    componentDidMount(){\n        this.props.obtenerCitas()\n    }\n\n    render(){\n        const citas = this.props.citas\n\n        const mensaje = Object.keys(citas).length === 0 ? 'No hay Citas' : 'Administra tus Citas'\n        return(\n            <div className='card mt-5'>\n                <div className='card-body'>\n                    <h2 className='card-title text-center'> {mensaje} </h2>\n                    <div className='lista-citas'>\n                        {Object.keys(citas).map(cita => (\n                            <Cita\n                                key={cita}\n                                info={citas[cita]}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nListaCitas.propTypes = {\n    citas: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    citas: state.citas.citas\n})\n\nexport default connect(mapStateToProps, {obtenerCitas}) (ListaCitas)\n","import React, { Component } from 'react';\nimport Header from './components/Header'\nimport AgregarCita from './components/AgregarCita'\nimport ListaCitas from './components/ListaCitas'\n\n// Redux\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nclass App extends Component {\n\n  render() {\n    return (\n        <Provider store={store}>\n            <div className=\"container\">\n                <Header\n                    title=\"Administrador Turnos Veterinaria\"\n                />\n                <div className='row'>\n                    <div className='col col-md-6'>\n                        <AgregarCita/>\n                    </div>\n                    <div className='col col-md-6'>\n                        <ListaCitas/>\n                    </div>\n                </div>\n            </div>\n        </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}